<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />

        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Themes/Light.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Accents/Default.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Globals.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- The default style behaves like a ContentControl and thus doesn't do anything
         fancy with the manipulation boundary feedback data.
         What it does is swallow the routed event. Thus, WPF's Window doesn't get dragged
         around when the event is raised. 
    
         See the following link for details:
         https://stackoverflow.com/questions/6916574/wpf-scrollviewer-panningmode-move-window -->
    <Style TargetType="controls:ManipulationBoundaryFeedbackAwareContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    
    
    
    <!-- This style goes a little further. It uses the event's translation data to translate the content.
         This gives an effect known from mobile applications in which the user can scroll a little bit 
         over the edges. -->
    <Style x:Key="BouncingManipulationBoundaryFeedbackAwareContentControl" 
           TargetType="controls:ManipulationBoundaryFeedbackAwareContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ManipulationBoundaryFeedbackAwareContentControl">
                    <ControlTemplate.Resources>
                        <c:MathOperationConverter x:Key="DivideConverter" Operator="Divide" />
                    </ControlTemplate.Resources>
                    
                    <Grid Background="Transparent"
                          ClipToBounds="True"
                          VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.RenderTransform>
                                <TranslateTransform X="{Binding TranslationDeltaX, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DivideConverter}, ConverterParameter=10}"
                                                    Y="{Binding TranslationDeltaY, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DivideConverter}, ConverterParameter=10}" />
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>