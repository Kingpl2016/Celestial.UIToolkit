<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />
        <c:SharedResourceDictionary Source="./IconElements.xaml" />
        <c:SharedResourceDictionary Source="../../Icons/ControlParts.xaml" />

        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Themes/Light.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Accents/Default.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Globals.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="PrimaryTreeViewItem" TargetType="TreeViewItem" BasedOn="{c:MergeStyles 'ListBackground ListBorder StandardForeground StandardFontProperties Shadow0'}">
        <Style.Resources>
            <!-- The ExpanderButton should have Active States matching the TreeViewItem Style.
                 It can't use the TreeViewItem's theming properties though, because they are used for the Header.
                 -> We must define the style per TreeViewItem. -->
            <Style x:Key="ExpanderButtonStyle" TargetType="ToggleButton" BasedOn="{c:MergeStyles 'TransparentButton StandardForeground'}">
                <Setter Property="Foreground" Value="{c:TemplatedParentBinding Foreground}" />
            </Style>
        </Style.Resources>
        
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RectangleFocusVisual}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="ItemContainerStyle" Value="{Binding ItemContainerStyle, RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="Padding" Value="{DynamicResource StandardListItemPadding}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{DynamicResource StandardCornerRadius}" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{DynamicResource DisabledThemeShadow}" />
        
        <!-- We need to manually set the current depth level of the TreeViewItem for the template.
             This works recursively:    ThisDepth = ParentElementDepth + 1. 
             For this to work correctly, every TreeViewItem needs to have this property set. -->
        <Setter Property="theming:TreeViewHelper.DepthLevel">
            <Setter.Value>
                <Binding Path="(theming:TreeViewHelper.DepthLevel)"
                         RelativeSource="{RelativeSource AncestorType=TreeViewItem}"
                         FallbackValue="0"
                         TargetNullValue="0"
                         ConverterParameter="1">
                    <Binding.Converter>
                        <c:MathOperationConverter Operator="Add" />
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Grid x:Name="HeaderRowContainer">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <Border x:Name="Bd"
                                        Grid.ColumnSpan="3"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                        SnapsToDevicePixels="False" />

                                <!-- This rect moves the Header to the right, so that it begins after the Spacer of
                                     the parent TreeViewItem.
                                     The formula is simple:    Width = Depth * MyToggleButtonWidth  -->
                                <Rectangle x:Name="SpacerRect">
                                    <Rectangle.Width>
                                        <MultiBinding>
                                            <MultiBinding.Converter>
                                                <c:MathOperationConverter Operator="Multiply" />
                                            </MultiBinding.Converter>

                                            <Binding Path="ActualWidth" ElementName="ExpanderButton" />
                                            <Binding Path="(theming:TreeViewHelper.DepthLevel)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </Rectangle.Width>
                                </Rectangle>
                                
                                <ToggleButton x:Name="ExpanderButton"
                                              Grid.Column="1"
                                              ClickMode="Press"
                                              IsChecked="{c:TemplatedParentBinding IsExpanded, Mode=TwoWay}"
                                              Style="{DynamicResource ExpanderButtonStyle}"
                                              Visibility="Hidden">
                                    <controls:PathIcon x:Name="ExpanderIcon"
                                                       Style="{StaticResource SmallIconElement}"
                                                       Data="{DynamicResource SimpleArrowRight}"
                                                       RenderTransformOrigin="0.5,0.5"
                                                       Margin="{c:GridUnit '2,0'}">
                                        <controls:PathIcon.RenderTransform>
                                            <RotateTransform />
                                        </controls:PathIcon.RenderTransform>
                                    </controls:PathIcon>
                                </ToggleButton>

                                <ContentPresenter x:Name="PART_Header"
                                                  Grid.Column="2"
                                                  ContentSource="Header"
                                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" />
                            </Grid>
                            
                            <ItemsPresenter x:Name="ItemsContentSite"
                                            Grid.Row="1"
                                            Visibility="Collapsed" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsContentSite" Property="Visibility" Value="Visible" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderIcon"
                                                         Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
                                                         Duration="{DynamicResource FastEnterAnimationDuration}"
                                                         To="90" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderIcon"
                                                         Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
                                                         Duration="{DynamicResource FastEnterAnimationDuration}"
                                                         To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="HasItems" Value="True">
                            <Setter TargetName="ExpanderButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="{DynamicResource ListAlternationIndex1BackgroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource ListAlternationIndex1BorderBrush}" />
                        </Trigger>

                        <Trigger SourceName="HeaderRowContainer" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ShadowElevation)}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:ActiveProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:ActiveProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:ActiveProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:ActiveProperties.ShadowElevation)}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:DisabledProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:DisabledProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:DisabledProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:DisabledProperties.ShadowElevation)}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ListActiveDisabledBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ListActiveDisabledBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="Accent1TreeViewItem" TargetType="TreeViewItem" BasedOn="{c:MergeStyles 'PrimaryTreeViewItem Accent1ListBackground Accent1ListBorder'}">
        <Style.Resources>
            <Style x:Key="ExpanderButtonStyle" TargetType="ToggleButton" BasedOn="{c:MergeStyles 'TransparentButton Accent1ControlForeground'}">
                <Setter Property="Foreground" Value="{c:TemplatedParentBinding Foreground}" />
            </Style>
        </Style.Resources>
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{DynamicResource OnListAccent1TextBrush}" />
    </Style>

    <Style x:Key="Accent2TreeViewItem" TargetType="TreeViewItem" BasedOn="{c:MergeStyles 'PrimaryTreeViewItem Accent2ListBackground Accent2ListBorder'}">
        <Style.Resources>
            <Style x:Key="ExpanderButtonStyle" TargetType="ToggleButton" BasedOn="{c:MergeStyles 'TransparentButton Accent2ControlForeground'}">
                <Setter Property="Foreground" Value="{c:TemplatedParentBinding Foreground}" />
            </Style>
        </Style.Resources>
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{DynamicResource OnListAccent2TextBrush}" />
    </Style>

    <Style TargetType="TreeViewItem" BasedOn="{StaticResource Accent2TreeViewItem}" />

    <!-- Compact Styles. -->
    <Style x:Key="CompactPrimaryTreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource PrimaryTreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource CompactListItemPadding}" />
    </Style>

    <Style x:Key="CompactAccent1TreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource Accent1TreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource CompactListItemPadding}" />
    </Style>

    <Style x:Key="CompactAccent2TreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource Accent2TreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource CompactListItemPadding}" />
    </Style>

    <!-- Large Styles. -->
    <Style x:Key="LargePrimaryTreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource PrimaryTreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource LargeListItemPadding}" />
    </Style>

    <Style x:Key="LargeAccent1TreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource Accent1TreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource LargeListItemPadding}" />
    </Style>

    <Style x:Key="LargeAccent2TreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource Accent2TreeViewItem}">
        <Setter Property="Padding" Value="{StaticResource LargeListItemPadding}" />
    </Style>

    

    <Style x:Key="PrimaryTreeView" TargetType="TreeView" BasedOn="{c:MergeStyles 'PrimaryBackground ControlBorder StandardForeground StandardFontProperties Shadow0'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="BorderThickness" Value="{DynamicResource SlimBorderThickness}" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{DynamicResource StandardCornerRadius}" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{DynamicResource AmbientControlThemeShadow}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource PrimaryTreeViewItem}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <ScrollViewer Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  theming:ControlProperties.CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                  Padding="{TemplateBinding Padding}"
                                  controls:ThemeShadow.Shadow="{TemplateBinding controls:ThemeShadow.Shadow}"
                                  controls:ThemeShadow.Elevation="{TemplateBinding controls:ThemeShadow.Elevation}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </ScrollViewer>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:DisabledProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:DisabledProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:DisabledProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:DisabledProperties.ShadowElevation)}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Accent1TreeView" TargetType="TreeView" BasedOn="{c:MergeStyles 'PrimaryTreeView'}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource Accent1TreeViewItem}" />
    </Style>
    
    <Style x:Key="Accent2TreeView" TargetType="TreeView" BasedOn="{c:MergeStyles 'PrimaryTreeView'}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource Accent2TreeViewItem}" />
    </Style>

    <Style TargetType="TreeView" BasedOn="{StaticResource Accent2TreeView}" />

    <!-- Compact Styles. -->
    <Style x:Key="CompactPrimaryTreeView" TargetType="TreeView" BasedOn="{StaticResource PrimaryTreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource CompactPrimaryTreeViewItem}" />
    </Style>
    
    <Style x:Key="CompactAccent1TreeView" TargetType="TreeView" BasedOn="{StaticResource Accent1TreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource CompactAccent1TreeViewItem}" />
    </Style>
    
    <Style x:Key="CompactAccent2TreeView" TargetType="TreeView" BasedOn="{StaticResource Accent2TreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource CompactAccent2TreeViewItem}" />
    </Style>
    
    <!-- Large Styles. -->
    <Style x:Key="LargePrimaryTreeView" TargetType="TreeView" BasedOn="{StaticResource PrimaryTreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource LargePrimaryTreeViewItem}" />
    </Style>
    
    <Style x:Key="LargeAccent1TreeView" TargetType="TreeView" BasedOn="{StaticResource Accent1TreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource LargeAccent1TreeViewItem}" />
    </Style>
    
    <Style x:Key="LargeAccent2TreeView" TargetType="TreeView" BasedOn="{StaticResource Accent2TreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource LargeAccent2TreeViewItem}" />
    </Style>
    
</ResourceDictionary>