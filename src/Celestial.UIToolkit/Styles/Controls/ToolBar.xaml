<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />
        <c:SharedResourceDictionary Source="../../Icons/ControlParts.xaml" />
        <c:SharedResourceDictionary Source="./Thumb.xaml" />
        <c:SharedResourceDictionary Source="./TextBox.xaml" />
        <c:SharedResourceDictionary Source="./Button.xaml" />
        <c:SharedResourceDictionary Source="./CheckBox.xaml" />
        <c:SharedResourceDictionary Source="./RadioButton.xaml" />
        <c:SharedResourceDictionary Source="./ComboBox.xaml" />

        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Themes/Light.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Accents/Default.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Globals.xaml" />
    </ResourceDictionary.MergedDictionaries>


    
    
    
    <Style x:Key="PrimaryToolBar" TargetType="ToolBar" BasedOn="{c:MergeStyles 'PaneBackground PaneBorder StandardForeground StandardFontProperties StandardPopup Shadow8'}">
        <Style.Resources>
            <Style x:Key="PrimaryToolBarButton" TargetType="ButtonBase" BasedOn="{c:MergeStyles 'PrimaryButton OnPaneControlBackground OnPaneControlBorder StandardForeground StandardFontProperties Shadow0'}">
                <Setter Property="Padding" Value="{c:GridUnit 2}" />
                <Setter Property="MinHeight" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=ToolBar}, FallbackValue=0}" />
                <Setter Property="MinWidth" Value="{c:SelfBinding MinHeight}" />
            </Style>

            <Style x:Key="ToolBarOverflowToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource PrimaryToolBarButton}" />

            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" 
                   TargetType="Button" 
                   BasedOn="{StaticResource PrimaryToolBarButton}" />

            <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}"
                   TargetType="ComboBox"
                   BasedOn="{StaticResource Accent2OutlinedComboBox}">
                <Setter Property="theming:TextBoxProperties.PlaceholderType" Value="Disappearing" />
            </Style>

            <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}"
                   TargetType="TextBox"
                   BasedOn="{StaticResource Accent2OutlinedTextBox}">
                <Setter Property="theming:TextBoxProperties.PlaceholderType" Value="Disappearing" />
            </Style>

            <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
                   TargetType="CheckBox"
                   BasedOn="{StaticResource Accent2CheckBox}">
                <Setter Property="theming:RippleProperties.ShowRippleAnimation" Value="False" />
            </Style>

            <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
                   TargetType="RadioButton"
                   BasedOn="{StaticResource Accent2RadioButton}">
                <Setter Property="theming:RippleProperties.ShowRippleAnimation" Value="False" />
            </Style>

            <Style x:Key="PrimaryToolBarThumb" TargetType="Thumb" BasedOn="{StaticResource RectanglePatternThumb}">
                <Setter Property="Padding" Value="{c:GridUnit '1'}" />
                <Setter Property="Width" Value="{c:GridUnit 3}" />
            </Style>
        </Style.Resources>
        
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{DynamicResource StandardCornerRadius}" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{DynamicResource AmbientControlThemeShadow}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolBar">                    
                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="False">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Thumb x:Name="Thumb"
                                       Style="{StaticResource PrimaryToolBarThumb}" 
                                       Visibility="Collapsed" />

                                <ToolBarPanel x:Name="PART_ToolBarPanel"
                                              Grid.Column="1"
                                              IsItemsHost="True" />

                                <!-- Be sure to always keep the Button's Style as a DynamicResource.
                                     Otherwise, the TransparentToolBar will have the wrong one. -->
                                <ToggleButton x:Name="OverflowToggleButton"
                                              Style="{DynamicResource ToolBarOverflowToggleButton}"
                                              Grid.Column="2"
                                              IsChecked="{c:TemplatedParentBinding IsOverflowOpen, Mode=TwoWay}"
                                              Visibility="Collapsed">
                                    <controls:PathIcon Data="{StaticResource More}" />
                                </ToggleButton>

                                <Popup x:Name="OverflowPopup"
                                       Placement="Bottom"
                                       PlacementTarget="{Binding ElementName=OverflowToggleButton}"
                                       IsOpen="{TemplateBinding IsOverflowOpen}"
                                       AllowsTransparency="True"
                                       Focusable="True"
                                       PopupAnimation="Fade">
                                    <Grid Margin="{DynamicResource PopupShadowSpacerMargin}">
                                        <controls:ThemeShadowPresenter SnapsToDevicePixels="False">
                                            <Border x:Name="PopupBorderBrush"
                                                    CornerRadius="{TemplateBinding theming:PopupProperties.CornerRadius}"
                                                    BorderThickness="{TemplateBinding theming:PopupProperties.BorderThickness}"
                                                    Background="{TemplateBinding theming:PopupProperties.BackgroundBrush}"
                                                    BorderBrush="{TemplateBinding theming:PopupProperties.BorderBrush}" />
                                        </controls:ThemeShadowPresenter>

                                        <Border BorderThickness="{Binding BorderThickness, ElementName=PopupBorderBrush}"
                                                Margin="{Binding BorderThickness, ElementName=DropDownBorder}" 
                                                Padding="{TemplateBinding theming:PopupProperties.Padding}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                                  FocusVisualStyle="{x:Null}"
                                                                  Focusable="True"
                                                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                  KeyboardNavigation.ControlTabNavigation="Cycle"
                                                                  WrapWidth="{c:GridUnit 10}" />
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Only show the Thumb if:
                             a) The ToolBar is directly inside a ToolBarTray.
                             b) ToolBarTray.IsLocked is false. -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="{x:Type ToolBarTray}">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource AncestorType=ToolBarTray, AncestorLevel=1}"
                                                 Converter="{x:Static c:GetTypeConverter.Default}" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Binding="{c:SelfBinding Path=(ToolBarTray.IsLocked)}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Thumb" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <Trigger Property="HasOverflowItems" Value="True">
                            <Setter TargetName="OverflowToggleButton" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="Thumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        
                        <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BackgroundBrush)}" />
                                <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BorderBrush)}" />
                                <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ForegroundBrush)}" />
                                <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ShadowElevation)}" />
                            </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:DisabledProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:DisabledProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:DisabledProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:DisabledProperties.ShadowElevation)}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToolBar" BasedOn="{StaticResource PrimaryToolBar}" />


    
    <Style x:Key="TransparentToolBar" TargetType="ToolBar" BasedOn="{c:MergeStyles 'PrimaryToolBar TransparentBackground TransparentBorder'}">
        <Style.Resources>
            <Style x:Key="PrimaryToolBarButton" TargetType="ButtonBase" BasedOn="{c:MergeStyles 'PrimaryButton'}">
                <Setter Property="MinHeight" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=ToolBar}, FallbackValue=0}" />
                <Setter Property="MinWidth" Value="{c:SelfBinding MinHeight}" />
            </Style>

            <Style x:Key="ToolBarOverflowToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource PrimarySquareButton}">
                <Setter Property="MinHeight" Value="0" />
                <Setter Property="MinWidth" Value="0" />
            </Style>

            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
                   TargetType="Button" 
                   BasedOn="{StaticResource PrimaryToolBarButton}" />
        </Style.Resources>
    </Style>


    <Style x:Name="PrimaryToolBarTray" TargetType="ToolBarTray">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    
</ResourceDictionary>