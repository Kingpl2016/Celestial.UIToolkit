<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />
        <c:SharedResourceDictionary Source="./TextBlock.xaml" />
        <c:SharedResourceDictionary Source="./IconElements.xaml" />
        <c:SharedResourceDictionary Source="../../Icons/ControlParts.xaml" />

        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Themes/Light.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Accents/Default.xaml" />
        <c:DesignTimeOnlyResourceDictionary Source="../Theming/Globals.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <c:ThicknessSidePickerConverter x:Key="TopBottomPicker" Left="0" Right="0" />
    <c:MathOperationConverter x:Key="ElevationAddConverter" Operator="Add" />

    <Style x:Key="PrimaryMenuItem" TargetType="MenuItem" BasedOn="{c:MergeStyles 'TransparentBorder OnPaneControlBackground PrimaryForeground PrimaryFontProperties StandardPopup'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="{StaticResource PrimaryListItemPadding}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="0" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{StaticResource BottomControlThemeShadow}" />
        <Setter Property="controls:ThemeShadow.Elevation">
            <Setter.Value>
                <!-- This increases the shadow elevation, the further down we go into a menu-item tree. -->
                <Binding Path="(controls:ThemeShadow.Elevation)"
                         RelativeSource="{RelativeSource AncestorType=MenuItem}"
                         Converter="{StaticResource ElevationAddConverter}"
                         ConverterParameter="8"
                         FallbackValue="16" />
            </Setter.Value>
        </Setter>
        <Setter Property="theming:MouseOverProperties.ShadowElevation" Value="{c:SelfBinding Path=(controls:ThemeShadow.Elevation)}" />
        <Setter Property="theming:PressedProperties.ShadowElevation" Value="{c:SelfBinding Path=(controls:ThemeShadow.Elevation)}" />
        <Setter Property="theming:DisabledProperties.ShadowElevation" Value="0" />
        <Setter Property="theming:PopupProperties.Padding" Value="{c:SelfBinding Padding, Converter={StaticResource TopBottomPicker}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <ControlTemplate.Resources>
                        <c:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                        <c:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
                    </ControlTemplate.Resources>

                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="False" />
                        <controls:Ripple x:Name="Ripple"
                                                Background="{TemplateBinding theming:ActiveProperties.BackgroundBrush}"
                                                BorderBrush="{TemplateBinding theming:ActiveProperties.BorderBrush}"
                                                Margin="{TemplateBinding BorderThickness}"
                                                IsEnabled="{TemplateBinding theming:RippleProperties.ShowRippleAnimation}"
                                                SnapsToDevicePixels="False" />

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="ExpandArrow" />
                                </Grid.ColumnDefinitions>

                                <Grid x:Name="IconContainer"
                                      Margin="{c:GridUnit '0,0,4,0'}"
                                      VerticalAlignment="Stretch">
                                    <ContentPresenter x:Name="IconContentSite"
                                                      HorizontalAlignment="Center"
                                                      VerticalAlignment="Center"
                                                      ContentSource="Icon" />

                                    <controls:PathIcon x:Name="CheckedIcon"
                                                       Style="{StaticResource SmallIconElement}"
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"
                                                       Foreground="{TemplateBinding Foreground}"
                                                       Data="{StaticResource Checkmark}"
                                                       Visibility="{c:TemplatedParentBinding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                </Grid>

                                <ContentPresenter x:Name="HeaderContentSite"
                                                  Grid.Column="1"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True" />

                                <TextBlock x:Name="InputGestureText"
                                           Grid.Column="2"
                                           Style="{StaticResource HintTextBlock}"
                                           Margin="{c:GridUnit '4,0,0,0'}"
                                           Text="{TemplateBinding InputGestureText}"
                                           Visibility="{c:TemplatedParentBinding InputGestureText, Converter={StaticResource StringToVisibilityConverter}}" />

                                <controls:PathIcon x:Name="ExpandArrowIcon"
                                                   Grid.Column="3"
                                                   Style="{StaticResource SmallIconElement}"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"
                                                   Margin="{c:GridUnit '4,0,0,0'}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Data="{StaticResource SimpleArrowRight}"
                                                   Visibility="Collapsed" />

                                <Popup x:Name="Popup"
                                       Placement="Bottom"
                                       PlacementTarget="{Binding ElementName=Bd}"
                                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       PopupAnimation="Fade">
                                    <Grid Margin="{StaticResource PopupShadowSpacerMargin}">
                                        <controls:ThemeShadowPresenter>
                                            <Border x:Name="SubmenuBorder"
                                                    CornerRadius="{TemplateBinding theming:PopupProperties.CornerRadius}"
                                                    BorderThickness="{TemplateBinding theming:PopupProperties.BorderThickness}"
                                                    Background="{TemplateBinding theming:PopupProperties.BackgroundBrush}"
                                                    BorderBrush="{TemplateBinding theming:PopupProperties.BorderBrush}" />
                                        </controls:ThemeShadowPresenter>

                                        <Border BorderThickness="{Binding BorderThickness, ElementName=SubmenuBorder}"
                                                Margin="{Binding BorderThickness, ElementName=DropDownBorder}" 
                                                Padding="{TemplateBinding theming:PopupProperties.Padding}">
                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            Grid.IsSharedSizeScope="True"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="IconContainer" Property="Margin" Value="{c:GridUnit '0,0,2,0', TargetType=Thickness}" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter TargetName="IconContainer" Property="Margin" Value="{c:GridUnit '0,0,2,0', TargetType=Thickness}" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="Popup" Property="Placement" Value="Right" />
                            <Setter TargetName="ExpandArrowIcon" Property="Visibility" Value="Visible" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="theming:MouseOverProperties.BackgroundBrush" Value="{StaticResource ListLowBrush}" />
                            <Setter Property="theming:ActiveProperties.BackgroundBrush" Value="{StaticResource ListHighBrush}" />
                            <Setter Property="theming:DisabledProperties.BackgroundBrush" Value="Transparent" />
                            <Setter Property="theming:DisabledProperties.BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="theming:MouseOverProperties.BackgroundBrush" Value="{StaticResource ListLowBrush}" />
                            <Setter Property="theming:ActiveProperties.BackgroundBrush" Value="{StaticResource ListHighBrush}" />
                            <Setter Property="theming:DisabledProperties.BackgroundBrush" Value="Transparent" />
                            <Setter Property="theming:DisabledProperties.BorderBrush" Value="Transparent" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Icon" Value="{x:Null}" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="IconContainer" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="IconContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Ripple" Property="IsActiveTrigger" Value="True" />
                            <Setter TargetName="Ripple" Property="AllowFading" Value="False" />
                        </Trigger>

                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <Trigger Property="theming:RippleProperties.ShowRippleAnimation" Value="True">
                            <Setter Property="theming:PressedProperties.BackgroundBrush" Value="{c:SelfBinding Background}" />
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ShadowElevation)}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Ripple" Property="IsActiveTrigger" Value="True" />
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:PressedProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:PressedProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:PressedProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:PressedProperties.ShadowElevation)}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:DisabledProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:DisabledProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:DisabledProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:DisabledProperties.ShadowElevation)}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="MenuItem" BasedOn="{StaticResource PrimaryMenuItem}" />

    <Style x:Key="CompactPrimaryMenuItem" TargetType="MenuItem" BasedOn="{StaticResource PrimaryMenuItem}">
        <Setter Property="Padding" Value="{StaticResource CompactListItemPadding}" />
    </Style>

    <Style x:Key="LargePrimaryMenuItem" TargetType="MenuItem" BasedOn="{StaticResource PrimaryMenuItem}">
        <Setter Property="Padding" Value="{StaticResource LargeListItemPadding}" />
    </Style>

    
    
    
    
    <Style x:Key="PrimaryContextMenu" TargetType="ContextMenu" BasedOn="{c:MergeStyles 'PrimaryForeground PrimaryFontProperties Shadow16'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{StaticResource PopupBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource PopupBorder}" />
        <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
        <Setter Property="Padding" Value="{Binding Source={StaticResource PrimaryListItemPadding}, Converter={StaticResource TopBottomPicker}}" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{StaticResource BottomControlThemeShadow}" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{StaticResource PrimaryCornerRadius}" />
        <Setter Property="Margin" Value="{StaticResource PopupShadowSpacerMargin}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Grid>
                        <controls:ThemeShadowPresenter SnapsToDevicePixels="False">
                            <Border x:Name="Bd"
                                    CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="False" />
                        </controls:ThemeShadowPresenter>

                        <Border x:Name="ItemsBorder"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Grid.IsSharedSizeScope="True" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ContextMenu" BasedOn="{StaticResource PrimaryContextMenu}" />

    <Style x:Key="CompactPrimaryContextMenu" TargetType="ContextMenu" BasedOn="{StaticResource PrimaryContextMenu}">
        <Style.Resources>
            <Style TargetType="MenuItem" BasedOn="{StaticResource CompactPrimaryMenuItem}" />
        </Style.Resources>
        <Setter Property="Padding" Value="{Binding Source={StaticResource CompactListItemPadding}, Converter={StaticResource TopBottomPicker}}" />
    </Style>

    <Style x:Key="LargePrimaryContextMenu" TargetType="ContextMenu" BasedOn="{StaticResource PrimaryContextMenu}">
        <Style.Resources>
            <Style TargetType="MenuItem" BasedOn="{StaticResource LargePrimaryMenuItem}" />
        </Style.Resources>
        <Setter Property="Padding" Value="{Binding Source={StaticResource LargeListItemPadding}, Converter={StaticResource TopBottomPicker}}" />
    </Style>


    
    

    <Style x:Key="PrimaryMenu" TargetType="Menu" BasedOn="{c:MergeStyles 'PaneBackground PaneBorder PrimaryForeground PrimaryFontProperties Shadow0'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}"
                          Background="Transparent">
                        <controls:ThemeShadowPresenter SnapsToDevicePixels="False">
                            <Border x:Name="Bd"
                                    CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="False" />
                        </controls:ThemeShadowPresenter>

                        <Border x:Name="ItemsBorder"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:MouseOverProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:MouseOverProperties.ShadowElevation)}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{c:SelfBinding Path=(theming:DisabledProperties.BackgroundBrush)}" />
                            <Setter Property="BorderBrush" Value="{c:SelfBinding Path=(theming:DisabledProperties.BorderBrush)}" />
                            <Setter Property="Foreground" Value="{c:SelfBinding Path=(theming:DisabledProperties.ForegroundBrush)}" />
                            <Setter Property="controls:ThemeShadow.Elevation" Value="{c:SelfBinding Path=(theming:DisabledProperties.ShadowElevation)}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Menu" BasedOn="{StaticResource PrimaryMenu}" />

    <Style x:Key="CompactPrimaryMenu" TargetType="Menu" BasedOn="{StaticResource PrimaryMenu}">
        <Style.Resources>
            <Style TargetType="MenuItem" BasedOn="{StaticResource CompactPrimaryMenuItem}" />
        </Style.Resources>
    </Style>

    <Style x:Key="LargePrimaryMenu" TargetType="Menu" BasedOn="{StaticResource PrimaryMenu}">
        <Style.Resources>
            <Style TargetType="MenuItem" BasedOn="{StaticResource LargePrimaryMenuItem}" />
        </Style.Resources>
    </Style>


</ResourceDictionary>