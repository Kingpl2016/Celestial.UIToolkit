<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />
        <c:SharedResourceDictionary Source="../../Icons/Badges.xaml" />
        <c:SharedResourceDictionary Source="./TextBlock.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!-- Use TargetType="Control", so that the PasswordBox can use the style too.
         Slightly problematic, since this allows setting this style on any type of control.
         To anyone reading this: Don't do that. -->
    <Style x:Key="StandardTextBox" TargetType="Control" BasedOn="{c:MultiStyle 'PrimaryBackground ControlBorderAccent2States StandardForeground StandardFontProperties Shadow0'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{c:GridUnit '2'}" />
        <Setter Property="MinWidth" Value="{c:GridUnit 30}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{StaticResource StandardCornerRadius}" />
        <Setter Property="PasswordBox.PasswordChar" Value="&#x2022;" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="controls:ThemeShadow.Shadow" Value="{StaticResource BottomControlThemeShadow}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{StaticResource CaretBrush}" />
        <Setter Property="PasswordBox.CaretBrush" Value="{StaticResource CaretBrush}" />
        <Setter Property="Background" Value="{StaticResource PrimaryLowBrush}" />
        <Setter Property="theming:MouseOverProperties.BackgroundBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="theming:ActiveProperties.BackgroundBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="theming:DisabledProperties.BackgroundBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
        <Setter Property="theming:TextBoxHelper.TextBox" Value="{Binding RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <Grid.Resources>

                            <Storyboard x:Key="MouseOverStoryboard">
                                <c:BrushAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                Storyboard.TargetProperty="Background">
                                    <c:DiscreteBrushKeyFrame KeyTime="0" Value="{Binding Path=(theming:MouseOverProperties.BackgroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                </c:BrushAnimationUsingKeyFrames>
                                <c:BrushAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                Storyboard.TargetProperty="BorderBrush">
                                    <c:DiscreteBrushKeyFrame KeyTime="0" Value="{Binding Path=(theming:MouseOverProperties.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                </c:BrushAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="DisabledStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                               Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusedBorder"
                                                               Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusedIndicator"
                                                               Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <c:BrushAnimation Storyboard.TargetName="Bd"
                                                  Storyboard.TargetProperty="Background"
                                                  Duration="0"
                                                  To="{Binding Path=(theming:DisabledProperties.BackgroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                <c:BrushAnimation Storyboard.TargetName="Bd"
                                                  Storyboard.TargetProperty="BorderBrush"
                                                  Duration="0"
                                                  To="{Binding Path=(theming:DisabledProperties.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Storyboard>

                            <Storyboard x:Key="FocusedStoryboard">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                               Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusedBorder"
                                                               Storyboard.TargetProperty="Visibility">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusedIndicator"
                                                               Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <c:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                            <c:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
                            <c:ThicknessSidePickerConverter x:Key="ThicknessLeftPickerConverter" Top="0" Right="0" Bottom="0" />
                        </Grid.Resources>

                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="TextBoxRow" />
                            <RowDefinition x:Name="AssistiveRow" Height="Auto" />
                        </Grid.RowDefinitions>

                        <controls:ThemeShadowPresenter>
                            <Grid SnapsToDevicePixels="False">
                                <Border x:Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="{Binding Path=(theming:ControlProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Border x:Name="FocusedBorder"
                                        Background="{TemplateBinding theming:ActiveProperties.BackgroundBrush}"
                                        BorderBrush="{TemplateBinding theming:ActiveProperties.BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{Binding Path=(theming:ControlProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        Visibility="Collapsed" />
                                <Border BorderThickness="{TemplateBinding BorderThickness}">
                                    <Rectangle x:Name="FocusedIndicator"
                                               Fill="{TemplateBinding theming:ActiveProperties.BorderBrush}"
                                               RenderTransformOrigin="0.5,0.5"
                                               Visibility="{Binding Path=(theming:TextBoxProperties.ShowFocusedIndicator), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                               VerticalAlignment="Bottom"
                                               Height="1.5"
                                               Margin="0,0,0,-0.5">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform ScaleX="0" />
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Border>
                            </Grid>
                        </controls:ThemeShadowPresenter>

                        <controls:PlaceholderOverlay x:Name="PlaceholderOverlay"
                                                     Placeholder="{TemplateBinding theming:TextBoxProperties.Placeholder}"
                                                     PlaceholderDisplayType="{TemplateBinding theming:TextBoxProperties.PlaceholderType}"
                                                     IsPlaceholderVisible="False"
                                                     FloatingPlaceholderScale="0.8"
                                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                     Padding="{TemplateBinding Padding}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <!-- Use a negative margin on the ScrollViewer, because of a .NET Bug:
                                        https://stackoverflow.com/a/26300334
                                        The ScrollViewer's margin is there to combat the internal TextBoxView being slightly moved to the right. -->
                                <Border Margin="{Binding Padding, Converter={x:Static c:NegateValueConverter.Default}, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="-1,0,0,0"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Border>

                                <controls:PathIcon x:Name="ValidationErrorIcon"
                                                   Grid.Column="1"
                                                   Margin="{c:GridUnit '1,0,0,0'}"
                                                   Visibility="Collapsed"
                                                   Foreground="{StaticResource ErrorBrush}"
                                                   Data="{StaticResource Error}" />
                            </Grid>
                        </controls:PlaceholderOverlay>

                        <Border x:Name="AssistiveElementsContainer"
                                Grid.Row="1"
                                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessLeftPickerConverter}}">
                            <Grid>
                                <TextBlock x:Name="AssistiveText"
                                           Style="{StaticResource CaptionHintTextBlock}"
                                           Text="{TemplateBinding theming:TextBoxProperties.AssistiveText}"
                                           TextTrimming="CharacterEllipsis"
                                           Margin="{c:GridUnit '0,0.5,0,0'}"
                                           Visibility="{Binding Path=(theming:TextBoxProperties.AssistiveText), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringToVisibilityConverter}}" />
                                <TextBlock x:Name="ValidationErrorText"
                                           Style="{StaticResource CaptionHintTextBlock}"
                                           Foreground="{StaticResource ErrorBrush}"
                                           Text="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource TemplatedParent}}"
                                           TextTrimming="CharacterEllipsis"
                                           Margin="{c:GridUnit '0,0.5,0,0'}"
                                           Visibility="Collapsed" />
                            </Grid>
                        </Border>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="{StaticResource ColorAnimationDuration}"
                                                      GeneratedEasingFunction="{StaticResource ColorAnimationEase}" />
                                    <VisualTransition To="Disabled" GeneratedDuration="0" />
                                    <VisualTransition To="ReadOnly" GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" Storyboard="{StaticResource MouseOverStoryboard}" />
                                <VisualState x:Name="Disabled" Storyboard="{StaticResource DisabledStoryboard}" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="{StaticResource ColorAnimationDuration}"
                                                      GeneratedEasingFunction="{StaticResource ColorAnimationEase}" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused" Storyboard="{StaticResource FocusedStoryboard}" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="TextBoxBase.IsReadOnly" Value="True">
                            <Setter Property="theming:ActiveProperties.BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="ValidationErrorIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ValidationErrorText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="AssistiveText" Property="Visibility" Value="Collapsed" />
                            <Setter Property="BorderBrush" Value="{StaticResource ErrorControlBorderBrush}" />
                            <Setter Property="theming:MouseOverProperties.BorderBrush" Value="{StaticResource ErrorControlHoverBorderBrush}" />
                            <Setter Property="theming:ActiveProperties.BorderBrush" Value="{StaticResource ErrorControlActiveBorderBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="theming:TextBoxHelper.HasText" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PlaceholderOverlay" Property="IsPlaceholderVisible" Value="True" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource EmptyValidationErrorTemplate}" />
        <Style.Triggers>
            <!-- I'd like to animate the Foreground via BrushAnimations, but I'm getting InvalidOperationExceptions 
                 in the TextBox (related to invalidating the TimeManager).
                 Since I don't have a reasonable way to fix this, I'm taking the old-fashioned Trigger route. -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:MouseOverProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:ActiveProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding Path=(theming:DisabledProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBox" BasedOn="{StaticResource StandardTextBox}" />
    <Style TargetType="RichTextBox" BasedOn="{StaticResource StandardTextBox}" />
    <Style TargetType="PasswordBox" BasedOn="{StaticResource StandardTextBox}" />

    <Style x:Key="OutlinedTextBoxBase" TargetType="Control" BasedOn="{StaticResource StandardTextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="theming:TextBoxProperties.ShowFocusedIndicator" Value="False" />
    </Style>

    <Style x:Key="OutlinedTextBox" TargetType="TextBox" BasedOn="{StaticResource OutlinedTextBoxBase}" />
    <Style x:Key="OutlinedRichTextBox" TargetType="RichTextBox" BasedOn="{StaticResource OutlinedTextBoxBase}" />
    <Style x:Key="OutlinedPasswordBox" TargetType="PasswordBox" BasedOn="{StaticResource OutlinedTextBoxBase}" />

</ResourceDictionary>