<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming">

    <Style TargetType="controls:RippleOverlay">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:RippleOverlay">
                    <Grid>
                        <Grid.Resources>
                            <Storyboard x:Key="NormalStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="ExpandingStoryboard">
                                <BooleanAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Storyboard.TargetProperty="IsAnimationExpanding">
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    <DiscreteBooleanKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                                <BooleanAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Storyboard.TargetProperty="IsAnimationFading">
                                    <!-- Important: Reset IsAnimationFading, since we can interrupt the Fading state.
                                                    This would result in IsAnimExpanding and IsAnimFading both being true. -->
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                    <LinearDoubleKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="{Binding AnimationScale, RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                                    <LinearDoubleKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="{Binding AnimationScale, RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="ExpandedStoryboard">
                                <BooleanAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Storyboard.TargetProperty="IsAnimationFading">
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                                <BooleanAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Storyboard.TargetProperty="IsAnimationExpanding">
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="FadingStoryboard">
                                <!-- Change IsAnimationFading property to notify the backing class when the fading animation is done. -->
                                <BooleanAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Storyboard.TargetProperty="IsAnimationFading">
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    <DiscreteBooleanKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="False" />
                                </BooleanAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleX">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding AnimationScale, RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorderScaleTransform"
                                                               Storyboard.TargetProperty="ScaleY">
                                    <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding AnimationScale, RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RippleBorder"
                                                               Storyboard.TargetProperty="Opacity">
                                    <LinearDoubleKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Grid.Resources>
                        
                        <controls:ClippingBorder CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}">
                            <Grid>
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True" />
                                <Canvas ClipToBounds="{TemplateBinding ClipToBounds}" IsHitTestVisible="False">
                                    <Border x:Name="RippleBorder"
                                            Canvas.Left="{TemplateBinding AnimationPositionX}"
                                            Canvas.Top="{TemplateBinding AnimationPositionY}"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="{Binding ActualWidth, ElementName=RippleBorder}"
                                            Width="{TemplateBinding AnimationDiameter}"
                                            Height="{TemplateBinding AnimationDiameter}"
                                            RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <ScaleTransform x:Name="RippleBorderScaleTransform"
                                                    ScaleX="0"
                                                    ScaleY="0" />
                                        </Border.RenderTransform>
                                    </Border>
                                </Canvas>
                            </Grid>
                        </controls:ClippingBorder>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="AnimationStates">
                                <VisualState x:Name="Normal" Storyboard="{StaticResource NormalStoryboard}" />
                                <VisualState x:Name="Expanding" Storyboard="{StaticResource ExpandingStoryboard}" />
                                <VisualState x:Name="Expanded" Storyboard="{StaticResource ExpandedStoryboard}" />
                                <VisualState x:Name="Fading" Storyboard="{StaticResource FadingStoryboard}" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>