<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Celestial.UIToolkit"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls"
                    xmlns:converters="clr-namespace:Celestial.UIToolkit.Converters">

    <ResourceDictionary.MergedDictionaries>
        <local:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <local:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="StandardButtonBase" TargetType="ButtonBase" BasedOn="{theming:MultiStyle 'StandardBackground StandardBorder StandardForeground AltFontProperties'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource RectangleFocusVisual}" />
        <Setter Property="MinWidth" Value="{theming:GridUnit 15}" />
        <Setter Property="MinHeight" Value="{theming:GridUnit 8}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource BaseHighestBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid>
                        <Grid.Resources>
                            <local:BindingProxy x:Key="MouseOverBackgroundColorProxy"
                                                Data="{Binding Path=(theming:MouseOverProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            <local:BindingProxy x:Key="DisabledBackgroundColorProxy"
                                                Data="{Binding Path=(theming:DisabledProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}}" />

                            <local:BindingProxy x:Key="MouseOverBorderColorProxy"
                                                Data="{Binding Path=(theming:MouseOverProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            <local:BindingProxy x:Key="DisabledBorderColorProxy"
                                                Data="{Binding Path=(theming:DisabledProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid.Resources>
                        <Border x:Name="Bd"
                                CornerRadius="{Binding Path=(theming:ControlProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}" />
                        <controls:RippleOverlay x:Name="Ripple"
                                                IsActiveTrigger="{TemplateBinding IsPressed}"
                                                AllowFading="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=True, Converter={x:Static converters:InvertBooleanConverter.Default}}"
                                                BorderBrush="{Binding Path=(theming:ActiveProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:ColorToSolidColorBrushConverter.Default}}"
                                                Background="{Binding Path=(theming:ActiveProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:ColorToSolidColorBrushConverter.Default}}">
                            <controls:RippleOverlay.OpacityMask>
                                <VisualBrush Visual="{Binding ElementName=Bd}" />
                            </controls:RippleOverlay.OpacityMask>
                        </controls:RippleOverlay>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="Background.Color">
                                            <EasingColorKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="{Binding Data, Source={StaticResource MouseOverBackgroundColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="BorderBrush.Color">
                                            <EasingColorKeyFrame KeyTime="{StaticResource ColorAnimationKeyTime}" Value="{Binding Data, Source={StaticResource MouseOverBorderColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="Background.Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBackgroundColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="BorderBrush.Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBorderColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="Background.Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource DisabledBackgroundColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="BorderBrush.Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource DisabledBorderColorProxy}}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:MouseOverProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:PressedProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding Path=(theming:DisabledProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, FallbackValue=False}" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:ActiveProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource StandardButtonBase}" />
    <Style TargetType="ToggleButton" BasedOn="{StaticResource StandardButtonBase}" />
    <Style TargetType="RepeatButton" BasedOn="{StaticResource StandardButtonBase}" />

    <Style x:Key="Accent1Button" 
           TargetType="ButtonBase" 
           BasedOn="{theming:MultiStyle 'StandardButtonBase Accent1Background Accent1Border OnAccent1Foreground'}" />

    <Style x:Key="Accent2Button" 
           TargetType="ButtonBase" 
           BasedOn="{theming:MultiStyle 'StandardButtonBase Accent2Background Accent2Border OnAccent2Foreground'}" />



    <!--
    Ghost Button.
    This is a type of button, which only displays a little border, not a gigantic square.
    -->

    <Style x:Key="GhostButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource StandardButtonBase}">
        <Setter Property="BorderThickness" Value="{StaticResource WideBorderThickness}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
    </Style>
    <Style x:Key="GhostButton" TargetType="ButtonBase" BasedOn="{StaticResource GhostButtonBase}" />

    <Style x:Key="Accent1GhostButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent1Button}">
        <Setter Property="BorderThickness" Value="{StaticResource WideBorderThickness}" />
        <Setter Property="Foreground" Value="{StaticResource StandardForegroundBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
    </Style>

    <Style x:Key="Accent2GhostButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent2Button}">
        <Setter Property="BorderThickness" Value="{StaticResource WideBorderThickness}" />
        <Setter Property="Foreground" Value="{StaticResource StandardForegroundBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
    </Style>



    <!--
    Minimal Button.
    This is a type of button, which only displays its content when not being interacted with.
    To indicate that this button can be interacted with, its FontWeight is bold, in comparison
    to the other buttons.
    -->

    <Style x:Key="MinimalButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource StandardButtonBase}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
    </Style>
    <Style x:Key="MinimalButton" TargetType="ButtonBase" BasedOn="{StaticResource MinimalButtonBase}" />

    <Style x:Key="Accent1MinimalButton" TargetType="ButtonBase" BasedOn="{StaticResource MinimalButton}">
        <Setter Property="theming:ActiveProperties.BackgroundColor" Value="{StaticResource Accent1LowColor}" />
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{StaticResource OnAccent1ForegroundBrush}" />
        <Setter Property="theming:MouseOverProperties.BackgroundColor" Value="{StaticResource Accent1HighColor}" />
        <Setter Property="theming:MouseOverProperties.ForegroundBrush" Value="{StaticResource OnAccent1ForegroundBrush}" />
        <Setter Property="theming:PressedProperties.BackgroundColor" Value="{StaticResource Accent1LowColor}" />
        <Setter Property="theming:PressedProperties.ForegroundBrush" Value="{StaticResource OnAccent1ForegroundBrush}" />
    </Style>

    <Style x:Key="Accent2MinimalButton" TargetType="ButtonBase" BasedOn="{StaticResource MinimalButton}">
        <Setter Property="theming:ActiveProperties.BackgroundColor" Value="{StaticResource Accent2LowColor}" />
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{StaticResource OnAccent2ForegroundBrush}" />
        <Setter Property="theming:MouseOverProperties.BackgroundColor" Value="{StaticResource Accent2HighColor}" />
        <Setter Property="theming:MouseOverProperties.ForegroundBrush" Value="{StaticResource OnAccent2ForegroundBrush}" />
        <Setter Property="theming:PressedProperties.BackgroundColor" Value="{StaticResource Accent2LowColor}" />
        <Setter Property="theming:PressedProperties.ForegroundBrush" Value="{StaticResource OnAccent2ForegroundBrush}" />
    </Style>



    <!--
    Square Button.
    This is a type of button which always resembles a square.
    It is supposed to be used in conjunction with symbols. 
    -->

    <Style x:Key="SquareButton" TargetType="ButtonBase" BasedOn="{StaticResource StandardButtonBase}">
        <Setter Property="MinWidth" Value="{theming:GridUnit 8}" />
        <Setter Property="MinHeight" Value="{theming:GridUnit 8}" />
        <Setter Property="Width" Value="{theming:GridUnit 8}" />
        <Setter Property="Height" Value="{theming:GridUnit 8}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.BorderColor" Value="{StaticResource BaseHighColor}" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Accent1SquareButton" 
           TargetType="ButtonBase" 
           BasedOn="{theming:MultiStyle 'SquareButton Accent1Border Accent1Background OnAccent1Foreground'}" />

    <Style x:Key="Accent2SquareButton" 
           TargetType="ButtonBase"
           BasedOn="{theming:MultiStyle 'SquareButton Accent2Border Accent2Background OnAccent2Foreground'}" />



    <!--
    Circle Button.
    A variation of the Square Button, which is, as expected, a circle.
    -->

    <Style x:Key="CircleButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource CircleButtonBase}" />

    <Style x:Key="Accent1CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent1SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>

    <Style x:Key="Accent2CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent2SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>



    <!--
    Hyperlink Button.
    This is exactly what it sounds like.
    -->

    <Style x:Key="HyperlinkButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource Accent2MediumBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource StandardFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}" />
        <Setter Property="FontWeight" Value="{StaticResource StandardFontWeight}" />
        <Setter Property="FontStretch" Value="{StaticResource StandardFontStretch}" />
        <Setter Property="FontStyle" Value="{StaticResource StandardFontStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Foreground="{TemplateBinding Foreground}"
                               Background="{TemplateBinding Background}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}"
                               FontWeight="{TemplateBinding FontWeight}"
                               FontStyle="{TemplateBinding FontStyle}"
                               FontStretch="{TemplateBinding FontStretch}"
                               TextDecorations="Underline"
                               Text="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Accent2HighBrush}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Accent2LowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>