<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="http://celestial-ui.com"
                    xmlns:theming="clr-namespace:Celestial.UIToolkit.Theming"
                    xmlns:controls="clr-namespace:Celestial.UIToolkit.Controls">

    <ResourceDictionary.MergedDictionaries>
        <c:SharedResourceDictionary Source="../Shared/Theming.xaml" />
        <c:SharedResourceDictionary Source="../Shared/FocusVisuals.xaml" />
        <c:SharedResourceDictionary Source="../Shared/TemplateParts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="StandardButton" TargetType="ButtonBase" BasedOn="{c:MultiStyle 'StandardBackground StandardBorder StandardForeground AltFontProperties BottomShadow NoShadow'}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource RectangleFocusVisual}" />
        <Setter Property="MinWidth" Value="{c:GridUnit 15}" />
        <Setter Property="MinHeight" Value="{c:GridUnit 8}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource BaseHighestBrush}" />
        <Setter Property="theming:ShadowProperties.ShadowType" Value="{x:Static controls:ShadowType.Directional}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Grid VisualStateManager.CustomVisualStateManager="{x:Static c:ExtendedVisualStateManager.Default}">
                        <Grid.Resources>
                            <c:BindingProxy x:Key="MouseOverBackgroundColorProxy"
                                            Data="{Binding Path=(theming:MouseOverProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            <c:BindingProxy x:Key="DisabledBackgroundColorProxy"
                                            Data="{Binding Path=(theming:DisabledProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}}" />

                            <c:BindingProxy x:Key="MouseOverBorderColorProxy"
                                            Data="{Binding Path=(theming:MouseOverProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            <c:BindingProxy x:Key="DisabledBorderColorProxy"
                                            Data="{Binding Path=(theming:DisabledProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}}" />
                            
                            <Storyboard x:Key="MouseOverStoryboard">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="Background.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBackgroundColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="BorderBrush.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBorderColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Shadow"
                                                               Storyboard.TargetProperty="Elevation">
                                    <LinearDoubleKeyFrame KeyTime="0" Value="{Binding Path=(theming:MouseOverProperties.ShadowElevation), RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="PressedStoryboard">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="Background.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBackgroundColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="BorderBrush.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource MouseOverBorderColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Shadow"
                                                               Storyboard.TargetProperty="Elevation">
                                    <LinearDoubleKeyFrame KeyTime="0" Value="{Binding Path=(theming:PressedProperties.ShadowElevation), RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="DisabledStoryboard">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="Background.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource DisabledBackgroundColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                              Storyboard.TargetProperty="BorderBrush.Color">
                                    <EasingColorKeyFrame KeyTime="0" Value="{Binding Data, Source={StaticResource DisabledBorderColorProxy}}" />
                                </ColorAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Shadow"
                                                               Storyboard.TargetProperty="Elevation">
                                    <LinearDoubleKeyFrame KeyTime="0" Value="{Binding Path=(theming:DisabledProperties.ShadowElevation), RelativeSource={RelativeSource TemplatedParent}}" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Grid.Resources>
                        <controls:ShadowDecorator x:Name="Shadow"
                                                  Style="{StaticResource ThemeableShadowDecorator}">
                            <Border x:Name="Bd"
                                    CornerRadius="{Binding Path=(theming:ControlProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}" />
                        </controls:ShadowDecorator>
                        <controls:RippleOverlay x:Name="Ripple"
                                                theming:ControlProperties.CornerRadius="{TemplateBinding theming:ControlProperties.CornerRadius}"
                                                IsActiveTrigger="{TemplateBinding IsPressed}"
                                                AllowFading="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=True, Converter={x:Static c:InvertBooleanConverter.Default}}"
                                                BorderBrush="{Binding Path=(theming:PressedProperties.BorderColor), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorToSolidColorBrushConverter.Default}}"
                                                Background="{Binding Path=(theming:PressedProperties.BackgroundColor), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorToSolidColorBrushConverter.Default}}"
                                                IsEnabled="{TemplateBinding theming:RippleProperties.ShowRippleAnimation}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="{StaticResource ColorAnimationDuration}" />
                                    <VisualTransition To="Disabled" GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" Storyboard="{StaticResource MouseOverStoryboard}" />
                                <VisualState x:Name="Pressed" Storyboard="{StaticResource PressedStoryboard}" />
                                <VisualState x:Name="Disabled" Storyboard="{StaticResource DisabledStoryboard}" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <!-- This Trigger will start the RippleAnimation (and keep it expanded)
                                 when a ToggleButton's IsChecked property gets changed via non-click input (e.g. binding).
                                 Without this, the animation would not run and thus, no IsChecked effect would be visible. -->
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsAnimationExpanding, ElementName=Ripple}" Value="False" />
                                <Condition Binding="{Binding IsExpanded, ElementName=Ripple}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Ripple" Property="IsActiveTrigger" Value="True" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:MouseOverProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:PressedProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding Path=(theming:DisabledProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, FallbackValue=False}" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(theming:ActiveProperties.ForegroundBrush), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" BasedOn="{StaticResource StandardButton}" />
    <Style TargetType="ToggleButton" BasedOn="{StaticResource StandardButton}" />
    <Style TargetType="RepeatButton" BasedOn="{StaticResource StandardButton}" />

    <Style x:Key="Accent1Button" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'StandardButton Accent1Background Accent1Border OnAccent1Foreground'}" />
    <Style x:Key="Accent2Button" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'StandardButton Accent2Background Accent2Border OnAccent2Foreground'}" />

    <Style x:Key="ElevatedStandardButton" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'StandardButton Elevated0ShadowInteractive'}" />
    <Style x:Key="ElevatedAccent1Button" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'Accent1Button Elevated0ShadowInteractive'}" />
    <Style x:Key="ElevatedAccent2Button" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'Accent2Button Elevated0ShadowInteractive'}" />


    <!--
    Flat Button.
    This type of button only shows text in its default state.
    When hovered/clicked, it will behave normally though.
    -->

    <Style x:Key="FlatButton" TargetType="ButtonBase" BasedOn="{StaticResource StandardButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="theming:MouseOverProperties.BackgroundColor" Value="{StaticResource BaseHighColor}" />
        <Setter Property="theming:PressedProperties.BackgroundColor" Value="{StaticResource BaseMediumColor}" />
        <Setter Property="theming:ActiveProperties.BackgroundColor" Value="{StaticResource BaseMediumColor}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
    </Style>

    <Style x:Key="Accent1FlatButton" TargetType="ButtonBase" BasedOn="{StaticResource FlatButton}">
        <Setter Property="Foreground" Value="{StaticResource Accent1MediumBrush}" />
        <Setter Property="theming:MouseOverProperties.ForegroundBrush" Value="{StaticResource Accent1MediumBrush}" />
        <Setter Property="theming:PressedProperties.ForegroundBrush" Value="{StaticResource Accent1MediumBrush}" />
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{StaticResource Accent1MediumBrush}" />
    </Style>

    <Style x:Key="Accent2FlatButton" TargetType="ButtonBase" BasedOn="{StaticResource FlatButton}">
        <Setter Property="Foreground" Value="{StaticResource Accent2MediumBrush}" />
        <Setter Property="theming:MouseOverProperties.ForegroundBrush" Value="{StaticResource Accent2MediumBrush}" />
        <Setter Property="theming:PressedProperties.ForegroundBrush" Value="{StaticResource Accent2MediumBrush}" />
        <Setter Property="theming:ActiveProperties.ForegroundBrush" Value="{StaticResource Accent2MediumBrush}" />
    </Style>

    <Style x:Key="ElevatedFlatButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'FlatButton Elevated0ShadowInteractive'}" />
    
    <Style x:Key="ElevatedAccent1FlatButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent1FlatButton Elevated0ShadowInteractive'}" />
    
    <Style x:Key="ElevatedAccent2FlatButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent2FlatButton Elevated0ShadowInteractive'}" />



    <!--
    Outlined button.
    An otherwise normal button with a border and transparent background in its default state.
    -->

    <Style x:Key="OutlinedButton" TargetType="ButtonBase" BasedOn="{StaticResource StandardButton}">
        <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="Accent1OutlinedButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent1Button}">
        <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource StandardForegroundBrush}" />
    </Style>
    
    <Style x:Key="Accent2OutlinedButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent2Button}">
        <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource StandardForegroundBrush}" />
    </Style>

    <Style x:Key="ElevatedOutlinedButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'OutlinedButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent1OutlinedButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent1OutlinedButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent2OutlinedButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent2OutlinedButton Elevated0ShadowInteractive'}" />



    <!--
    Square Button.
    This is a type of button which always resembles a square.
    It is supposed to be used in conjunction with symbols. 
    -->

    <Style x:Key="SquareButton" TargetType="ButtonBase" BasedOn="{StaticResource StandardButton}">
        <Setter Property="MinWidth" Value="{c:GridUnit 8}" />
        <Setter Property="MinHeight" Value="{c:GridUnit 8}" />
        <Setter Property="Width" Value="{c:GridUnit 8}" />
        <Setter Property="Height" Value="{c:GridUnit 8}" />
        <Setter Property="theming:DisabledProperties.BackgroundColor" Value="Transparent" />
        <Setter Property="theming:DisabledProperties.BorderColor" Value="{StaticResource BaseHighColor}" />
        <Setter Property="theming:DisabledProperties.ForegroundBrush" Value="{StaticResource DisabledForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="{StaticResource SlimBorderThickness}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Accent1SquareButton" 
           TargetType="ButtonBase" 
           BasedOn="{c:MultiStyle 'SquareButton Accent1Border Accent1Background OnAccent1Foreground'}" />

    <Style x:Key="Accent2SquareButton" 
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'SquareButton Accent2Border Accent2Background OnAccent2Foreground'}" />

    <Style x:Key="ElevatedSquareButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'SquareButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent1SquareButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent1SquareButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent2SquareButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent2SquareButton Elevated0ShadowInteractive'}" />



    <!--
    Circle Button.
    A variation of the Square Button, which is, as expected, a circle.
    -->

    <Style x:Key="CircleButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource CircleButtonBase}" />

    <Style x:Key="Accent1CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent1SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>

    <Style x:Key="Accent2CircleButton" TargetType="ButtonBase" BasedOn="{StaticResource Accent2SquareButton}">
        <Setter Property="theming:ControlProperties.CornerRadius" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>

    <Style x:Key="ElevatedCircleButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'CircleButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent1CircleButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent1CircleButton Elevated0ShadowInteractive'}" />

    <Style x:Key="ElevatedAccent2CircleButton"
           TargetType="ButtonBase"
           BasedOn="{c:MultiStyle 'Accent2CircleButton Elevated0ShadowInteractive'}" />



    <!--
    Hyperlink Button.
    This is exactly what it sounds like.
    -->

    <Style x:Key="HyperlinkButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource StandardButtonFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource Accent2MediumBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource StandardFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}" />
        <Setter Property="FontWeight" Value="{StaticResource StandardFontWeight}" />
        <Setter Property="FontStretch" Value="{StaticResource StandardFontStretch}" />
        <Setter Property="FontStyle" Value="{StaticResource StandardFontStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Foreground="{TemplateBinding Foreground}"
                               Background="{TemplateBinding Background}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}"
                               FontWeight="{TemplateBinding FontWeight}"
                               FontStyle="{TemplateBinding FontStyle}"
                               FontStretch="{TemplateBinding FontStretch}"
                               TextDecorations="Underline"
                               Text="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Accent2HighBrush}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Accent2LowBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>