trigger:
  - master

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:.r)

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  releaseVersion: '0.1.0'

steps:
# Install NuGet packages and do a nuget restore.
- task: NuGetToolInstaller@0
  displayName: 'Use latest NuGet version'

- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    restoreSolution: '$(solution)'
    noCache: true

# Build and test.
- task: MSBuild@1
  displayName: 'Build $(solution)'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Publish Dlls, Packages and ControlGallery.
- task: PublishBuildArtifacts@1
  displayName: 'Publish Dll Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Binaries'
    ArtifactName: 'Binaries'
  condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

- task: PublishBuildArtifacts@1
  displayName: 'Publish ControlGallery'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/ControlGallery'
    ArtifactName: 'ControlGallery'
  condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

- task: PublishBuildArtifacts@1
  displayName: 'Publish NuGet Package Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/NuGet'
    ArtifactName: 'NuGet-Packages'
  condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
